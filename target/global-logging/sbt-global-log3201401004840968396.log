[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Fujitsu\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Fujitsu\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 11.0.17)
[debug]       Load.loadUnit: plugins took 164.9642ms
[debug]       Load.loadUnit: defsScala took 0.3584ms
[debug] [Loading] Scanning directory C:\Users\Fujitsu\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Fujitsu\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 31.3628 ms
[debug]           Load.resolveProject(global-plugins) took 87.8694ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Fujitsu\.sbt\1.0\plugins, plugins: List(<none>))) took 165.0867ms
[debug] [Loading] Done in C:\Users\Fujitsu\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 197.2563ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4759ms
[debug]     Load.loadUnit(file:/C:/Users/Fujitsu/.sbt/1.0/plugins/, ...) took 378.2334ms
[debug]   Load.apply: load took 690.9678ms
[debug]   Load.apply: resolveProjects took 12.7476ms
[debug]   Load.apply: finalTransforms took 124.6439ms
[debug]   Load.apply: config.delegates took 27.4006ms
[debug]   Load.apply: Def.make(settings)... took 780.3202ms
[debug]   Load.apply: structureIndex took 175.8707ms
[debug]   Load.apply: mkStreams took 2.8278ms
[info] loading global plugins from C:\Users\Fujitsu\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 7188.8307ms
[debug]           Load.loadUnit: plugins took 37.539ms
[debug]           Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory C:\Users\Fujitsu\IdeaProjects\library-management-functionnal\project
[debug]             Load.loadUnit: mkEval took 38.2253ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Fujitsu\IdeaProjects\library-management-functionnal\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.9526 ms
[info] loading settings for project library-management-functionnal-build from idea.sbt ...
[debug]               Load.resolveProject(library-management-functionnal-build) took 22.2914ms
[debug]             Load.loadTransitive: finalizeProject(Project(id library-management-functionnal-build, base: C:\Users\Fujitsu\IdeaProjects\library-management-functionnal\project, plugins: List(<none>))) took 27.3314ms
[debug] [Loading] Done in C:\Users\Fujitsu\IdeaProjects\library-management-functionnal\project, returning: (library-management-functionnal-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4200.8131ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.5419ms
[debug]         Load.loadUnit(file:/C:/Users/Fujitsu/IdeaProjects/library-management-functionnal/project/, ...) took 4250.6854ms
[debug]       Load.apply: load took 4254.6823ms
[debug]       Load.apply: resolveProjects took 0.2125ms
[debug]       Load.apply: finalTransforms took 24.1095ms
[debug]       Load.apply: config.delegates took 0.6681ms
[debug]       Load.apply: Def.make(settings)... took 151.8334ms
[debug]       Load.apply: structureIndex took 63.5321ms
[debug]       Load.apply: mkStreams took 0.0051ms
[info] loading project definition from C:\Users\Fujitsu\IdeaProjects\library-management-functionnal\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 7110.5037ms
[debug]     Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory C:\Users\Fujitsu\IdeaProjects\library-management-functionnal
[debug]       Load.loadUnit: mkEval took 0.4565ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.0512 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 62.3182ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Fujitsu\IdeaProjects\library-management-functionnal, plugins: List(<none>))) took 69.6264ms
[debug] [Loading] Done in C:\Users\Fujitsu\IdeaProjects\library-management-functionnal, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2610.9132ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.0341ms
[debug]   Load.loadUnit(file:/C:/Users/Fujitsu/IdeaProjects/library-management-functionnal/, ...) took 9741.5385ms
[debug] Load.apply: load took 9744.2609ms
[debug] Load.apply: resolveProjects took 0.1363ms
[debug] Load.apply: finalTransforms took 39.3042ms
[debug] Load.apply: config.delegates took 0.4477ms
[debug] Load.apply: Def.make(settings)... took 114.8709ms
[debug] Load.apply: structureIndex took 39.3499ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to library-management-functionnal (in build file:/C:/Users/Fujitsu/IdeaProjects/library-management-functionnal/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49514 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49514, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to library-management-functionnal (in build file:/C:/Users/Fujitsu/IdeaProjects/library-management-functionnal/)
[debug] > Exec(idea-shell, None, None)
